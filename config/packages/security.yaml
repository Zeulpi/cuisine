security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider

            custom_authenticator: App\Security\AppAuthenticator
            entry_point: App\Security\AppAuthenticator

            logout:
                path: logout
                target: /

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /

                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
                #always_remember_me: true
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Roels hierarchy
    role_hierarchy:
        ROLE_CREATOR: [ROLE_CREATOR, ROLE_USER]
        ROLE_ADMIN: [ROLE_CREATOR, ROLE_ADMIN]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Autorise l'acc√®s libre √† la page de login
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }

        # üîí Prot√®ge la page de lecture (liste des recettes)
        - { path: ^/recipe$, roles: ROLE_CREATOR }
        - { path: ^/recipe/new, roles: ROLE_CREATOR }
        - { path: ^/recipe/update, roles: ROLE_CREATOR }
        # Prot√®ge la cr√©ation et l'√©dition de recettes
        - { path: ^/recipe/delete, roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_CREATOR }
        - { path: ^/users/list, roles: ROLE_ADMIN }

        # Par d√©faut, tout le reste est accessible √† tous
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
